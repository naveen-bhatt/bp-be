name: Deploy App to Dev Environment
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: dev
jobs:
  deploy-app:
    name: Deploy Application to Dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Build and Push Docker Image
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Build image
          docker build -t dev-bluepansy-api .
          
          # Tag for ECR
          docker tag dev-bluepansy-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/dev-bluepansy-api:latest
          
          # Push to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/dev-bluepansy-api:latest
          
      - name: Update ECS Service
        run: |
          # Force new deployment to pick up the new image
          aws ecs update-service --cluster dev-bluepansy-cluster --service dev-bluepansy-service --force-new-deployment
          
      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable --cluster dev-bluepansy-cluster --services dev-bluepansy-service
          
      - name: Run Database Migrations
        id: run-migrations
        run: |
          echo "üîÑ Running database migrations..."
          
          # Get ECS task definition ARN
          TASK_DEF_ARN=$(aws ecs describe-task-definition \
            --task-definition dev-bluepansy-task \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "üîç Using task definition: $TASK_DEF_ARN"
          
          # Get network configuration from the ECS service
          NETWORK_CONFIG=$(aws ecs describe-services \
            --cluster dev-bluepansy-cluster \
            --services dev-bluepansy-service \
            --query 'services[0].networkConfiguration' \
            --output json)
          
          # Run migrations using ECS run-task with same network config and an environment override
          echo "üöÄ Starting migration task..."
          aws ecs run-task \
            --cluster dev-bluepansy-cluster \
            --launch-type FARGATE \
            --task-definition $TASK_DEF_ARN \
            --network-configuration "$NETWORK_CONFIG" \
            --overrides '{"containerOverrides":[{"name":"dev-api","command":["alembic","upgrade","head"],"environment":[{"name":"DATABASE_URL","value":"${{ secrets.DATABASE_URL }}"}]}]}' \
            --query 'tasks[0].taskArn' \
            --output text > /tmp/migration-task-arn
          
          MIGRATION_TASK_ARN=$(cat /tmp/migration-task-arn)
          echo "üîç Migration task ARN: $MIGRATION_TASK_ARN"
          
          # Wait for migration task to complete
          echo "‚è≥ Waiting for migration task to complete..."
          aws ecs wait tasks-stopped \
            --cluster dev-bluepansy-cluster \
            --tasks $MIGRATION_TASK_ARN
          
          # Check migration task status and get details
          TASK_DETAILS=$(aws ecs describe-tasks \
            --cluster dev-bluepansy-cluster \
            --tasks $MIGRATION_TASK_ARN \
            --query 'tasks[0].containers[0].{exitCode:exitCode,reason:reason,lastStatus:lastStatus}' \
            --output json)
          
          EXIT_CODE=$(echo "$TASK_DETAILS" | jq -r '.exitCode')
          LAST_STATUS=$(echo "$TASK_DETAILS" | jq -r '.lastStatus')
          REASON=$(echo "$TASK_DETAILS" | jq -r '.reason')
          
          echo "::set-output name=exit_code::$EXIT_CODE"
          echo "::set-output name=last_status::$LAST_STATUS"
          echo "::set-output name=reason::$REASON"
          echo "::set-output name=task_arn::$MIGRATION_TASK_ARN"
          
      - name: Check Migration Status and Fail on Error
        run: |
          EXIT_CODE="${{ steps.run-migrations.outputs.exit_code }}"
          LAST_STATUS="${{ steps.run-migrations.outputs.last_status }}"
          REASON="${{ steps.run-migrations.outputs.reason }}"
          MIGRATION_TASK_ARN="${{ steps.run-migrations.outputs.task_arn }}"
          
          if [ "$EXIT_CODE" != "0" ]; then
            echo "‚ùå Migration task failed with exit code: $EXIT_CODE"
            echo "Last Status: $LAST_STATUS"
            echo "Reason: $REASON"
            echo "ECS Task ARN: $MIGRATION_TASK_ARN"
            
            # Use jq to get the full log output and log it for debugging
            echo "üîç Retrieving CloudWatch logs for failed task..."
            LOG_GROUP="/ecs/dev-bluepansy-api"
            LOG_STREAM=$(aws logs describe-log-streams \
              --log-group-name "$LOG_GROUP" \
              --order-by LastEventTime \
              --descending \
              --limit 1 \
              --query 'logStreams[0].logStreamName' \
              --output text)
              
            if [ "$LOG_STREAM" != "None" ]; then
              echo "Log Stream: $LOG_STREAM"
              echo "--- LOGS START ---"
              aws logs get-log-events --log-group-name "$LOG_GROUP" --log-stream-name "$LOG_STREAM" --query 'events[*].message' --output text
              echo "--- LOGS END ---"
            else
              echo "Could not find recent log stream for task."
            fi
            exit 1
          else
            echo "‚úÖ Database migrations completed successfully!"
          fi

      - name: Health Check
        run: |
          # Wait for service to be ready
          sleep 30
          # Basic health check
          curl -f https://dev-api.bluepansy.in/health || echo "Health check failed - service might still be starting"

      - name: Deployment Summary
        run: |
          echo "üöÄ App Deployment to Dev Complete!"
          echo "üåê API Endpoint: https://dev-api.bluepansy.in"
          echo "üìä ECS Service: dev-bluepansy-service"
          echo "üê≥ Docker Image: dev-bluepansy-api:latest"