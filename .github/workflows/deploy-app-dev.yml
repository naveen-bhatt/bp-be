name: Deploy App to Dev Environment

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: dev

jobs:
  deploy-app:
    name: Deploy Application to Dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

          # Build image
          docker build -t dev-bluepansy-api .

          # Tag for ECR
          docker tag dev-bluepansy-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/dev-bluepansy-api:latest

          # Push to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/dev-bluepansy-api:latest

      - name: Update ECS Service
        run: |
          # Force new deployment to pick up the new image
          aws ecs update-service --cluster dev-bluepansy-cluster --service dev-bluepansy-service --force-new-deployment

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable --cluster dev-bluepansy-cluster --services dev-bluepansy-service

      - name: Run Database Migrations
        run: |
          echo "🔄 Running database migrations..."

          # Get ECS task definition ARN
          TASK_DEF_ARN=$(aws ecs describe-task-definition \
            --task-definition dev-bluepansy-task \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "🔍 Using task definition: $TASK_DEF_ARN"

                    # Get private subnet IDs from the ECS service and format them properly
          SUBNET_IDS_RAW=$(aws ecs describe-services \
            --cluster dev-bluepansy-cluster \
            --services dev-bluepansy-service \
            --query 'services[0].networkConfiguration.awsvpcConfiguration.subnets[]' \
            --output text)

          # Convert tab/space separated string to comma-separated
          SUBNET_IDS=$(echo "$SUBNET_IDS_RAW" | tr '\t' ' ' | tr ' ' '\n' | grep -v '^$' | tr '\n' ',' | sed 's/,$//')

          echo "🔍 Raw subnets: $SUBNET_IDS_RAW"
          echo "🔍 Formatted subnets: $SUBNET_IDS"

          # Get security group IDs from the ECS service
          SECURITY_GROUPS=$(aws ecs describe-services \
            --cluster dev-bluepansy-cluster \
            --services dev-bluepansy-service \
            --query 'services[0].networkConfiguration.awsvpcConfiguration.securityGroups[]' \
            --output text)

          echo "🔍 Using security groups: $SECURITY_GROUPS"

          # Run migrations using ECS run-task with same network config
          echo "🚀 Starting migration task..."
          aws ecs run-task \
            --cluster dev-bluepansy-cluster \
            --launch-type FARGATE \
            --task-definition $TASK_DEF_ARN \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides":[{"name":"dev-api","command":["alembic","upgrade","head"]}]}' \
            --query 'tasks[0].taskArn' \
            --output text > /tmp/migration-task-arn

          MIGRATION_TASK_ARN=$(cat /tmp/migration-task-arn)
          echo "🔍 Migration task ARN: $MIGRATION_TASK_ARN"

          # Wait for migration task to complete
          echo "⏳ Waiting for migration task to complete..."
          aws ecs wait tasks-stopped \
            --cluster dev-bluepansy-cluster \
            --tasks $MIGRATION_TASK_ARN

          # Check migration task status
          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster dev-bluepansy-cluster \
            --tasks $MIGRATION_TASK_ARN \
            --query 'tasks[0].lastStatus' \
            --output text)

          if [ "$TASK_STATUS" = "STOPPED" ]; then
            EXIT_CODE=$(aws ecs describe-tasks \
              --cluster dev-bluepansy-cluster \
              --tasks $MIGRATION_TASK_ARN \
              --query 'tasks[0].containers[0].exitCode' \
              --output text)
            
            if [ "$EXIT_CODE" = "0" ]; then
              echo "✅ Database migrations completed successfully!"
            else
              echo "❌ Migration task failed with exit code: $EXIT_CODE"
              
              # Get detailed error information
              echo "🔍 Getting task details for debugging..."
              aws ecs describe-tasks \
                --cluster dev-bluepansy-cluster \
                --tasks $MIGRATION_TASK_ARN \
                --query 'tasks[0].containers[0].{exitCode:exitCode,reason:reason,lastStatus:lastStatus}' \
                --output table
              
              # Get CloudWatch logs if available
              echo "🔍 Checking for CloudWatch logs..."
              LOG_GROUP="/ecs/dev-bluepansy-api"
              
              # Try to find the specific log stream for this migration task
              echo "🔍 Looking for log streams..."
              aws logs describe-log-streams \
                --log-group-name "$LOG_GROUP" \
                --order-by LastEventTime \
                --descending \
                --max-items 5 \
                --query 'logStreams[*].logStreamName' \
                --output table 2>/dev/null || echo "Could not list log streams"
              
              # Try to get logs from the most recent stream
              LOG_STREAM=$(aws logs describe-log-streams \
                --log-group-name "$LOG_GROUP" \
                --order-by LastEventTime \
                --descending \
                --max-items 1 \
                --query 'logStreams[0].logStreamName' \
                --output text 2>/dev/null || echo "No log streams found")
              
              echo "🔍 Using log stream: $LOG_STREAM"
              
              if [ "$LOG_STREAM" != "No log streams found" ] && [ "$LOG_STREAM" != "None" ]; then
                echo "🔍 Recent logs from migration task:"
                echo "🔍 Log stream: $LOG_STREAM"
                
                # Try to get logs with different approaches
                echo "🔍 Attempting to get logs..."
                
                # Method 1: Get all events from the stream
                aws logs get-log-events \
                  --log-group-name "$LOG_GROUP" \
                  --log-stream-name "$LOG_STREAM" \
                  --query 'events[*].message' \
                  --output text 2>/dev/null || echo "Method 1 failed"
                
                # Method 2: Get events with time range
                echo "🔍 Trying with time range..."
                aws logs get-log-events \
                  --log-group-name "$LOG_GROUP" \
                  --log-stream-name "$LOG_STREAM" \
                  --start-time $(($(date +%s) - 600))000 \
                  --query 'events[*].message' \
                  --output text 2>/dev/null || echo "Method 2 failed"
                
                # Method 3: Get raw events without query
                echo "🔍 Trying raw events..."
                aws logs get-log-events \
                  --log-group-name "$LOG_GROUP" \
                  --log-stream-name "$LOG_STREAM" \
                  --output json 2>/dev/null | jq -r '.events[].message' 2>/dev/null || echo "Method 3 failed"
                
              else
                echo "🔍 No log streams found. Checking if log group exists..."
                aws logs describe-log-groups \
                  --log-group-name-prefix "/ecs/dev-bluepansy" \
                  --query 'logGroups[*].logGroupName' \
                  --output table 2>/dev/null || echo "Could not list log groups"
              fi
              
              exit 1
            fi
          else
            echo "❌ Migration task did not complete properly. Status: $TASK_STATUS"
            exit 1
          fi

      - name: Health Check
        run: |
          # Wait for service to be ready
          sleep 30

          # Basic health check
          curl -f https://dev-api.bluepansy.in/health || echo "Health check failed - service might still be starting"

      - name: Deployment Summary
        run: |
          echo "🚀 App Deployment to Dev Complete!"
          echo "🌐 API Endpoint: https://dev-api.bluepansy.in"
          echo "📊 ECS Service: dev-bluepansy-service"
          echo "🐳 Docker Image: dev-bluepansy-api:latest"
