name: Deploy App to Production Environment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"
        type: choice
        options:
          - production

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: production

jobs:
  deploy-app:
    name: Deploy Application to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

          # Build image
          docker build -t prod-bluepansy-api .

          # Tag for ECR
          docker tag prod-bluepansy-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/prod-bluepansy-api:latest

          # Push to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/prod-bluepansy-api:latest

      - name: Update ECS Service
        run: |
          # Force new deployment to pick up the new image
          aws ecs update-service --cluster prod-bluepansy-cluster --service prod-bluepansy-service --force-new-deployment

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable --cluster prod-bluepansy-cluster --services prod-bluepansy-service

      - name: Health Check
        run: |
          # Wait for service to be ready
          sleep 30

          # Basic health check
          curl -f https://api.bluepansy.in/health || echo "Health check failed - service might still be starting"

      - name: Run Database Migrations
        run: |
          echo "üîÑ Running database migrations..."

          # Run migrations using the deployed Docker container
          # This ensures all dependencies are available
          docker run --rm \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e PYTHONPATH=/app \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/prod-bluepansy-api:latest \
            alembic upgrade head --config /app/alembic.ini

          echo "‚úÖ Database migrations completed successfully!"

      - name: Deployment Summary
        run: |
          echo "üöÄ App Deployment to Production Complete!"
          echo "üåê API Endpoint: https://api.bluepansy.in"
          echo "üìä ECS Service: prod-bluepansy-service"
          echo "üê≥ Docker Image: prod-bluepansy-api:latest"
          echo "‚úÖ Production deployment successful!"
