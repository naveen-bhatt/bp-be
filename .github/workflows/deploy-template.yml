name: Deploy Environment Template

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: "ap-south-1"
      require-approval:
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    name: Deploy ${{ inputs.environment }} Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Bootstrap CDK (if needed)
        run: |
          cd infrastructure
          cdk bootstrap || echo "CDK already bootstrapped"

      - name: Synthesize CDK
        run: |
          cd infrastructure
          cdk synth

      - name: Deploy Infrastructure
        run: |
          cd infrastructure
          if [ "${{ inputs.require-approval }}" = "true" ]; then
            cdk deploy --all --context environment=${{ inputs.environment }}
          else
            cdk deploy --all --context environment=${{ inputs.environment }} --require-approval never
          fi

      - name: Build and Push Docker Image
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com

          # Build image
          docker build -t ${{ inputs.environment }}-bluepansy-api .

          # Tag for ECR
          docker tag ${{ inputs.environment }}-bluepansy-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.environment }}-bluepansy-api:latest

          # Push to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.environment }}-bluepansy-api:latest

      - name: Update ECS Service
        run: |
          # Force new deployment to pick up the new image
          aws ecs update-service --cluster ${{ inputs.environment }}-bluepansy-cluster --service ${{ inputs.environment }}-bluepansy-service --force-new-deployment

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable --cluster ${{ inputs.environment }}-bluepansy-cluster --services ${{ inputs.environment }}-bluepansy-service

      - name: Deployment Summary
        run: |
          echo "üöÄ ${{ inputs.environment }} Environment Deployment Complete!"
          if [ "${{ inputs.environment }}" = "production" ]; then
            echo "üåê API Endpoint: https://api.bluepansy.in"
          else
            echo "üåê API Endpoint: https://${{ inputs.environment }}-api.bluepansy.in"
          fi
          echo "üìä ECS Service: ${{ inputs.environment }}-bluepansy-service"
          echo "üóÑÔ∏è  RDS Database: ${{ inputs.environment }}-database"
